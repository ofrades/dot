---
- name: System
  hosts: localhost
  become: true
  vars:
    favcolor: green
    user: ofrades
    font: IBMPlexMono

  pre_tasks:
    - name: Ensuring Homebrew Is Installed
      stat:
        path: /home/linuxbrew/.linuxbrew/bin/brew
      register: homebrew_check

    - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
      fail:
        msg: Homebrew is missing, install from http://brew.sh
      when:
        - not homebrew_check.stat.exists

    - name: Installing Homebrew
      shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      when:
        - not homebrew_check.stat.exists

  tasks:

    - name: System packages
      package:
        state: latest
        name: "{{ item }}"
      with_items:
        # sway
        - sway
        - wl-clipboard
        - waybar
        - wf-recorder
        - clipman
        - rofi
        - blueman
        - grim
        # system
        - curl
        - wget
        - gzip
        - ninja-build
        - gettext
        - libtool
        - autoconf
        - automake
        - cmake
        - g++
        - pkg-config
        - unzip
        - doxygen
        # tools
        - stow
        - kitty
        - fish
        - fzf
        - git
        - bat
        - exa
        - fd-find
        - ripgrep
        - tmate
        - python3-neovim
        - python3-pip
        - awscli
        - pipenv
        - gh
        # languages
        - golang
        - nodejs
        - npm
        - cargo
        - luarocks
        - jq
        - gem

    - name: Sytem packages
      package:
        state: latest
        name: "{{ item }}"
      with_items:
        - build-essential
        - mako-notifier
        - libtool-bin
        - polkitd
      when: ansible_distribution == "Ubuntu"


    - name: Sytem packages
      package:
        state: latest
        name: "{{ item }}"
      with_items:
        - "@development-tools"
        - mako
        - polkit-gnome
      when: ansible_distribution == "Fedora"

    - name: Remove neovim
      file:
        state: absent
        path: "{{ lookup('env', 'HOME') }}/neovim"

    - name: Download neovim
      git:
        repo: https://github.com/neovim/neovim
        dest: "{{ lookup('env', 'HOME') }}/neovim"

    - name: Install neovim
      shell:
        cmd: |
          make -j 20
          make install
        chdir: "{{ lookup('env', 'HOME') }}/neovim"


    - name: Remove noisetorch
      file:
        state: absent
        path: "{{ lookup('env', 'HOME') }}/noisetorch"

    - name: Download noisetorch
      git:
        repo: https://github.com/noisetorch/NoiseTorch
        dest: "{{ lookup('env', 'HOME') }}/noisetorch"

    - name: Install noisetorch
      shell:
        cmd: |
          sudo make
          cp ./bin/noisetorch "{{ lookup('env', 'HOME') }}/.local/bin"
          cp ./assets/noisetorch.desktop "{{ lookup('env', 'HOME') }}/.local/share/applications"
          cp ./assets/icon/noisetorch.png "{{ lookup('env', 'HOME') }}/.local/share/icons/hicolor/256x256/apps"
        chdir: "{{ lookup('env', 'HOME') }}/noisetorch"

    - name: Install with snap
      community.general.snap:
        name: "{{ item }}"
        state: present
      with_items:
        - slack
        - starship
      when: ansible_distribution == "Ubuntu"

    - name: Install with flatpak
      community.general.flatpak:
        name: "{{ item }}"
        state: present
      with_items:
        - slack
      when: ansible_distribution == "Fedora"


    - name: Install with npm
      community.general.npm:
        name: "{{ item }}"
        state: present
        global: true
        path: "~/.npm-global"
      with_items:
        - neovim
        - typescript
        - serverless
        - n
        - yarn
        - pnpm
        - '@aws-amplify/cli'

    - name: Install with brew
      become: false
      community.general.homebrew:
        path: /home/linuxbrew/.linuxbrew/bin
        state: present
        name: "{{ item }}"
      with_items:
        - lazygit
        - pyenv
        - deno
        - tfenv
        - cdktf

    - name: Install with pip
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - pynvim
        - rofimoji

    - name: Set fish as default shell for {{ user }}
      user:
        name: "{{ user }}"
        shell: /usr/bin/fish

    - name: Get Font
      get_url:
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/{{ font }}.zip
        dest: /etc/{{ font }}.zip

    - name: Create fonts folder
      file:
        path: "/home/{{ user }}/.fonts/"
        state: directory

    - name: Move Font
      unarchive:
        src: /etc/{{ font }}.zip
        dest: "/home/{{ user }}/.fonts/"

    - name: Ensure dot folders exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - ~/.config/nvim
        - ~/.config/fish
        - ~/.config/lazygit
        - ~/.aws
        - ~/.ssh

    - name: Stow items
      shell: stow {{ item }}
      with_items:
        - nvim
        - fish
        - aws
        - ssh
        - lazygit
        - npmrc
        - starship
        - kitty
        - gitconfig
        - gitignoreglobal
        - gitcommitmessage
        - sway
        - waybar
        - mako
        - swaylock
        - tmux
        - local

    - name: Set ssh permissions
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: Set ssh permissions
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: Set ssh pub permissions
      file:
        path: "/home/{{ user }}/.ssh/id_ed25519.pub"
        mode: 0644

    - name: Set ssh private permissions
      file:
        path: "/home/{{ user }}/.ssh/id_ed25519"
        mode: 0600
